<%- include('partials/head', { title: "Payment | CarGo", pageStyle: "css/payment.css" }) %>

<body>
    <%- include('partials/navbar') %>

    <section class="payment-page">
        <div class="payment-container">
            <h2>Enter Your Payment Details</h2>


            <!-- Booking Details -->
            <div class="booking-details">
                <h3>Booking Summary</h3>
                <p><strong>Car:</strong> <%= car.brand %> - <%= car.model %></p>
                <p><strong>Price Per Day:</strong> $<%= car.price_per_day %></p>
                <p><strong>Total Price:</strong> $<%= total_price %></p>
                <p><strong>Start Date:</strong> <%= start_date %></p>
                <p><strong>End Date:</strong> <%= end_date %></p>
                <!-- <p><strong>Booking id:</strong> <%= booking_id %></p> -->
            </div>

            <form id="payment-form">
                <label for="name">Name on Card:</label>
                <input type="text" id="name" name="name" placeholder="Your Name" required>

                <div id="card-element"></div>
                <input type="hidden" id="booking_id" name="booking_id" value="<%= booking_id %>">
                <input type="hidden" id="total_price" name="total_price" value="<%= total_price %>">
            
                <label for="zip">ZIP Code:</label>
                <input type="text" id="zip" name="zip" placeholder="12345" required>
            
                
        
            
                <button type="button" id="pay-button">Pay Now</button>
            </form>
            

            <p id="payment-message"></p>
        </div>
    </section>

    <script src="https://js.stripe.com/v3/"></script>
    <script>
        const stripe = Stripe("<%= process.env.STRIPE_PUBLISHABLE_KEY %>");
        const elements = stripe.elements();

        // Create the card input field
        const cardElement = elements.create('card', {
            style: {
                base: {
                    fontSize: '16px',
                    color: '#32325d',
                    '::placeholder': {
                        color: '#aab7c4',
                    },
                },
                invalid: {
                    color: '#fa755a',
                },
            },
        });
        cardElement.mount('#card-element');

        document.getElementById("pay-button").addEventListener("click", async () => {
            const zipCode = document.getElementById("zip").value;
            const booking_id = document.getElementById("booking_id").value;
            const total_price = document.getElementById("total_price").value;

            console.log("üìå Sending Payment Data:", { booking_id, total_price, zipCode });

            if (!booking_id) {
        document.getElementById("payment-message").textContent = "‚ùå Error: Missing Booking ID.";
        return;
    }
            // Step 1: Create Payment Intent
            const response = await fetch("/payment/create-payment-intent", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ 
                    booking_id: booking_id,
                    total_price: parseFloat("<%= total_price %>"), 
                    zip: zipCode 
                })
            });

            const { clientSecret, payment_id } = await response.json();

            // Step 2: Process Payment
            const { paymentIntent, error } = await stripe.confirmCardPayment(clientSecret, {
                payment_method: { 
                    card: cardElement,
                    billing_details: { address: { postal_code: zipCode } }
                }
            });

            if (error) {
                document.getElementById("payment-message").textContent = "‚ùå Payment failed: " + error.message;
            } else if (paymentIntent.status === "requires_action") {
                // 3D Secure authentication
                const { error: actionError } = await stripe.handleCardAction(clientSecret);
                if (actionError) {
                    document.getElementById("payment-message").textContent = "‚ùå Payment authentication failed.";
                } else {
                    confirmPayment(payment_id);
                }
            } else if (paymentIntent.status === "succeeded") {
                confirmPayment(payment_id);
            }
        });

        // Step 3: Confirm Payment in Database
        async function confirmPayment(payment_id) {
            const confirmResponse = await fetch('/payment/confirm', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ paymentIntentId: payment_id })
            });

            if (confirmResponse.ok) {
                window.location.href = "/payment/success";
            } else {
                document.getElementById("payment-message").textContent = "‚ùå Error confirming payment.";
            }
        }
    </script>

    <%- include('partials/footer') %>
</body>
</html>
